m = dimn[1]
n = dimn[2]
theta = t(t(c(1:n)))
theta[1:n,] = 0;
theta2 = theta #renew theta
Xt = t(x)
p = Xt%*%x
i = det(p)
l = (Xt%*%y)
inv = solve(p)
n = ncol(A)
input <- read.table(file_name,header = FALSE,sep = ",")
A <- as.matrix(input);
n = ncol(A)
y = t(t(mat[,n+1]))
#!/usr/bin/env Rscript
# your code must have this first line.
# Train code for linear regression part goes here
args <- commandArgs(trailingOnly = TRUE)
file_name <- args[1]
outputfile <- args[2]
file_name  = "H:/R workspace/assnmt2/files1/input1.csv";
outputfile = "sol.txt";
test <- read.table(file_name,header = FALSE,sep = ",")
mat <- as.matrix(test);
dimn = dim(mat)
m = dimn[1]
n = dimn[2]-1
y = t(t(mat[,n+1]))
mat = mat[,-(n+1)]
x = t(t(mat));
for(j in 1:n){
x = cbind(x,x[,j]*x[,j])
}
dimn = dim(x)
m = dimn[1]
n = dimn[2]
theta = t(t(c(1:n)))
theta[1:n,] = 0;
#theta2 = theta #renew theta
#----------------------------------- calculating more inverse#
Xt = t(x)
p = Xt%*%x
i = det(p)
l = (Xt%*%y)
inv = solve(p)
moreinverse = inv%*%l
theta = moreinverse
#---------------------------------#
write.table(theta, file.path(outputfile), sep = ",", row.names = FALSE,col.names = FALSE,
qmethod = "double",append = FALSE);
#!/usr/bin/env Rscript
# your code must have this first line.
# Test code for linear regression part goes here
args <- commandArgs(trailingOnly = TRUE)
file_name <- args[1]
modeltheta <- args[2]
model_result <- args[3]
file_name  = "H:/R workspace/assnmt2/files1/public_test1.csv";
modeltheta = "sol.txt";
model_result  = "testanswer.txt";
input <- read.table(file_name,header = FALSE,sep = ",")
A <- as.matrix(input);
n = ncol(A)
for(j in 1:n){
A = cbind(x,A[,j]*A[,j])
}
result <- read.table(modeltheta,header = FALSE,sep = " ")
theta <- as.matrix(result);
y = A%*%theta
write.table(y, file.path(model_result), sep = ",", row.names = FALSE,col.names = FALSE,
qmethod = "double",append = FALSE);
A <- as.matrix(input);
n = ncol(A)
for(i in 1:r){
A = cbind(x,A[,r]*A[,r])
}
r = ncol(A)
for(i in 1:r){
A = cbind(x,A[,r]*A[,r])
}
View(A)
View(input)
A <- as.matrix(input);
View(A)
r = ncol(A)
r = ncol(A)
for(i in 1:r){
A = cbind(x,A[,r]*A[,r])
}
#!/usr/bin/env Rscript
# your code must have this first line.
# Test code for linear regression part goes here
args <- commandArgs(trailingOnly = TRUE)
file_name <- args[1]
modeltheta <- args[2]
model_result <- args[3]
file_name  = "H:/R workspace/assnmt2/files1/public_test1.csv";
modeltheta = "sol.txt";
model_result  = "testanswer.txt";
input <- read.table(file_name,header = FALSE,sep = ",")
A <- t(t(as.matrix(input)));
r = ncol(A)
for(i in 1:r){
A = cbind(x,A[,r]*A[,r])
}
r = ncol(A)
for(i in 1:r){
A = cbind(x,A[,i]*A[,i])
}
args <- commandArgs(trailingOnly = TRUE)
file_name <- args[1]
modeltheta <- args[2]
file_name  = "H:/R workspace/assnmt2/files1/input2.csv";
modeltheta = "sol.txt";
input <- read.table(file_name,header = FALSE,sep = ",")
mat <- as.matrix(input);
dimn = dim(mat)
m = dimn[1]
n = dimn[2]-1
y = t(t(mat[,n+1]))
mat = mat[,-(n+1)]
x = t(t(mat));
View(input)
for(i in y){
if(i>max){
max =i;
}
}
#!/usr/bin/env Rscript
# your code must have this first line.
# Train code for logistic regression part goes here
args <- commandArgs(trailingOnly = TRUE)
file_name <- args[1]
modeltheta <- args[2]
file_name  = "H:/R workspace/assnmt2/files1/input2.csv";
modeltheta = "sol.txt";
input <- read.table(file_name,header = FALSE,sep = ",")
mat <- as.matrix(input);
dimn = dim(mat)
m = dimn[1]
n = dimn[2]-1
y = mat[,n+1]
mat = mat[,-(n+1)]
x = t(t(mat));
max = 0;
for(i in y){
if(i>max){
max =i;
}
}
t = matrix(1:max*m,m,max)
t[,] = 0;
h = rdim(y)
h = NROW(y)
count = sum(t[1,])
count = sum(t[,1])
count = sum(t[1:max,1])
View(input)
count = sum(t[,1])
count = sum(t[,2])
View(t)
t = matrix(1:max*m,m,max)
t[,] = 0;
h = NROW(y)
for(p in 1:h){
yi = y[p]
t[p,yi] = 1;
}
View(t)
count = sum(t[,2])
count = sum(t[,1])
theta = matrix(1:max*n,n,max)
theta = 0;
theta = matrix(1:max*n,n,max)
theta[,] = 0;
2^3
e^3
2.72^2
2.72^(-2)
2.72^(1/2)
4^(1/2)
example = 1;
prob = e^(t(theta[example,])%*%x[example,])
prob = 2.72^(t(theta[example,])%*%x[example,])
prob = 2.72^(t(theta[,example])%*%x[example,])
example = 3;
prob = 2.72^(t(theta[,example])%*%x[example,])
for(c in 1:max){
denom = denom + 2.72^(t(theta[,c])%*%x[example,])
}
for(c in 1:max){
denom = 0
denom = denom + 2.72^(t(theta[,c])%*%x[example,])
}
denom = 0
for(c in 1:max){
denom = denom + 2.72^(t(theta[,c])%*%x[example,])
}
t(theta[,c])
x[example,]
a = cbind(1,2,3)
b = cbind(1,2,3)
a%*%b
denom = denom + 2.72^((theta[,c])%*%x[example,])
theta[,c]
#!/usr/bin/env Rscript
# your code must have this first line.
# Train code for logistic regression part goes here
args <- commandArgs(trailingOnly = TRUE)
file_name <- args[1]
modeltheta <- args[2]
file_name  = "H:/R workspace/assnmt2/files1/input2.csv";
modeltheta = "sol.txt";
input <- read.table(file_name,header = FALSE,sep = ",")
mat <- as.matrix(input);
dimn = dim(mat)
m = dimn[1]
n = dimn[2]-1
y = mat[,n+1]
mat = mat[,-(n+1)]
x = t(t(mat));
##################create more feature here if want
#for(j in 1:n){
#}
#dimn = dim(x)
#m = dimn[1]
#n = dimn[2]
#-----------------------------------------------------#
max = 0;
for(i in y){
if(i>max){
max =i;
}
}
til = matrix(1:max*m,m,max)
til[,] = 0;
h = NROW(y)
for(p in 1:h){
yi = y[p]
til[p,yi] = 1;
}
#initializing theta
classes = max;
feature = n
theta = matrix(1:max*n,classes,features)
##########################7 rows x   54 column
theta[,] = 0;
theta2 = theta;
#count occurnce
count = sum(t[,1])
example = 1;
alpha = .01;
#!/usr/bin/env Rscript
# your code must have this first line.
# Train code for logistic regression part goes here
args <- commandArgs(trailingOnly = TRUE)
file_name <- args[1]
modeltheta <- args[2]
file_name  = "H:/R workspace/assnmt2/files1/input2.csv";
modeltheta = "sol.txt";
input <- read.table(file_name,header = FALSE,sep = ",")
#!/usr/bin/env Rscript
# your code must have this first line.
# Train code for logistic regression part goes here
args <- commandArgs(trailingOnly = TRUE)
file_name <- args[1]
modeltheta <- args[2]
file_name  = "H:/R workspace/assnmt2/files1/input2.csv";
modeltheta = "sol.txt";
input <- read.table(file_name,header = FALSE,sep = ",")
mat <- as.matrix(input);
dimn = dim(mat)
m = dimn[1]
n = dimn[2]-1
y = mat[,n+1]
mat = mat[,-(n+1)]
x = t(t(mat));
##################create more feature here if want
#for(j in 1:n){
#}
#dimn = dim(x)
#m = dimn[1]
#n = dimn[2]
#-----------------------------------------------------#
max = 0;
for(i in y){
if(i>max){
max =i;
}
}
til = matrix(1:max*m,m,max)
til[,] = 0;
h = NROW(y)
for(p in 1:h){
yi = y[p]
til[p,yi] = 1;
}
#initializing theta
classes = max;
feature = n
theta = matrix(1:max*n,classes,feature)
##########################7 rows x   54 column
theta[,] = 0;
theta2 = theta;
#count occurnce
count = sum(t[,1])
example = 1;
alpha = .01;
for(a in 1:classes){
denom = 0
for(c in 1:features){
denom = denom + 2.72^(t(theta[c,])%*%x[example,])
}
for(b in 1:features){
num = 2.72^(t(theta[a,])%*%x[example,])
prob = num/denom
gradient = x[example,b]*(til[example,a]-prob)
theta2[a,b] = theta - alpha*gradient;
}
}
theta = theta2;
for(a in 1:classes){
denom = 0
for(c in 1:feature){
denom = denom + 2.72^(t(theta[c,])%*%x[example,])
}
for(b in 1:feature){
num = 2.72^(t(theta[a,])%*%x[example,])
prob = num/denom
gradient = x[example,b]*(til[example,a]-prob)
theta2[a,b] = theta - alpha*gradient;
}
}
theta = theta2;
for(a in 1:classes){
denom = 0
for(c in 1:classes){
denom = denom + 2.72^(t(theta[c,])%*%x[example,])
}
for(b in 1:feature){
num = 2.72^(t(theta[a,])%*%x[example,])
prob = num/denom
gradient = x[example,b]*(til[example,a]-prob)
theta2[a,b] = theta - alpha*gradient;
}
}
theta = theta2;
theta2[a,b] = theta - alpha*gradient[1];
theta2[a,b] = theta - alpha*gradient[1,1];
for(a in 1:classes){
denom = 0
for(c in 1:classes){
denom = denom + 2.72^(t(theta[c,])%*%x[example,])
}
for(b in 1:feature){
num = 2.72^(t(theta[a,])%*%x[example,])
prob = num/denom
gradient = x[example,b]*(til[example,a]-prob)
theta2[a,b] = theta[a,b] - alpha*gradient;
}
}
View(theta2)
View(x)
#!/usr/bin/env Rscript
# your code must have this first line.
# Train code for logistic regression part goes here
args <- commandArgs(trailingOnly = TRUE)
file_name <- args[1]
modeltheta <- args[2]
file_name  = "H:/R workspace/assnmt2/files1/input2.csv";
modeltheta = "sol.txt";
input <- read.table(file_name,header = FALSE,sep = ",")
mat <- as.matrix(input);
dimn = dim(mat)
m = dimn[1]
n = dimn[2]-1
y = mat[,n+1]
mat = mat[,-(n+1)]
x = t(t(mat));
##################create more feature here if want
#for(j in 1:n){
#}
#dimn = dim(x)
#m = dimn[1]
#n = dimn[2]
#-----------------------------------------------------#
max = 0;
for(i in y){
if(i>max){
max =i;
}
}
til = matrix(1:max*m,m,max)
til[,] = 0;
h = NROW(y)
for(p in 1:h){
yi = y[p]
til[p,yi] = 1;
}
#initializing theta
classes = max;
feature = n
theta = matrix(1:max*n,classes,feature)
##########################7 rows x   54 column
theta[,] = 0;
theta2 = theta;
#count occurnce
count = sum(til[,1])
example = 1;
alpha = .01;
for(example in 1:4000)
{
for(a in 1:classes){
denom = 0
for(c in 1:classes){
denom = denom + 2.72^(t(theta[c,])%*%x[example,])
}
for(b in 1:feature){
num = 2.72^(t(theta[a,])%*%x[example,])
prob = num/denom
gradient = x[example,b]*(til[example,a]-prob)
theta2[a,b] = theta[a,b] - alpha*gradient;
}
}
theta = theta2;
}
#!/usr/bin/env Rscript
# your code must have this first line.
# Train code for logistic regression part goes here
args <- commandArgs(trailingOnly = TRUE)
file_name <- args[1]
modeltheta <- args[2]
file_name  = "H:/R workspace/assnmt2/files1/input2.csv";
modeltheta = "sol.txt";
input <- read.table(file_name,header = FALSE,sep = ",")
#!/usr/bin/env Rscript
# your code must have this first line.
# Train code for logistic regression part goes here
args <- commandArgs(trailingOnly = TRUE)
file_name <- args[1]
modeltheta <- args[2]
file_name  = "H:/R workspace/assnmt2/files1/input2.csv";
modeltheta = "sol.txt";
input <- read.table(file_name,header = FALSE,sep = ",")
mat <- as.matrix(input);
dimn = dim(mat)
m = dimn[1]
n = dimn[2]-1
y = mat[,n+1]
mat = mat[,-(n+1)]
x = t(t(mat));
##################create more feature here if want
#for(j in 1:n){
#}
#dimn = dim(x)
#m = dimn[1]
#n = dimn[2]
#-----------------------------------------------------#
max = 0;
for(i in y){
if(i>max){
max =i;
}
}
til = matrix(1:max*m,m,max)
til[,] = 0;
h = NROW(y)
for(p in 1:h){
yi = y[p]
til[p,yi] = 1;
}
#initializing theta
classes = max;
feature = n
theta = matrix(1:max*n,classes,feature)
##########################7 rows x   54 column
theta[,] = 0;
theta2 = theta;
#count occurnce
count = sum(til[,1])
example = 1;
alpha = .01;
for(a in 1:classes){
denom = 0
for(c in 1:classes){
denom = denom + 2.72^(t(theta[c,])%*%x[example,])
}
for(b in 1:feature){
num = 2.72^(t(theta[a,])%*%x[example,])
prob = num/denom
gradient = x[example,b]*(til[example,a]-prob)
theta2[a,b] = theta[a,b] - alpha*gradient;
}
}
theta = theta2;
example = example+1
for(a in 1:classes){
denom = 0
for(c in 1:classes){
denom = denom + 2.72^(t(theta[c,])%*%x[example,])
}
for(b in 1:feature){
num = 2.72^(t(theta[a,])%*%x[example,])
prob = num/denom
gradient = x[example,b]*(til[example,a]-prob)
theta2[a,b] = theta[a,b] - alpha*gradient;
}
}
theta = theta2;
example = example+1
View(theta2)
